{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\cosmo\\\\OneDrive\\\\\\uBC14\\uD0D5 \\uD654\\uBA74\\\\react-guide\\\\src\\\\components\\\\NewExpense\\\\ExpenseForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { scryRenderedComponentsWithType } from 'react-dom/test-utils';\nimport './ExpenseForm.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ExpenseForm = props => {\n  _s();\n\n  const [enterTitle, setEnteredTitle] = useState('');\n  const [enterAmount, setEnteredAmount] = useState('');\n  const [enterDate, setEnteredDate] = useState(''); // const [userInput, setUserInput] = useState({\n  //     enterTitle: '',\n  //     enterAmount: '',\n  //     enterDate: ''\n  // });\n\n  const titleChangeHandler = event => {\n    setEnteredTitle(event.target.value); // setUserInput({\n    //    ...userInput,\n    //    enterTitle: event.target.value\n    //});\n    //나중에 이전 state가 현재 state에 영향을 주는 것이라면 밑에 방식으로 하라\n    // setUserInput((prevState) => {\n    //     return ({\n    //         ...prevState, enteredTitle: event.target.value\n    //     });\n    // });\n  };\n\n  const amountChangeHandler = event => {\n    setEnteredAmount(event.target.value); //     setUserInput({\n    //         ...userInput,\n    //         enterAmount: event.target.value\n    //     });\n  };\n\n  const DateChangeHandler = event => {\n    setEnteredDate(event.target.value); // setUserInput({\n    //     ...userInput,\n    //     enterDate: event.target.value\n    // });\n  };\n\n  const submitHandler = event => {\n    event.preventDefault();\n    const expenseData = {\n      title: enterTitle,\n      amount: enterAmount,\n      date: new Date(enterDate)\n    };\n    props.onSaveExpenseData();\n    setEnteredTitle('');\n    setEnteredAmount('');\n    setEnteredDate('');\n  }; //onSubmit이 왜 필요한가?\n  //input태그에서 발생하는 submit이벤트를 처리할 수 있다...\n  //preventDefault is built into javascript\n\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: submitHandler,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"new-expense__controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Title\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: enterTitle,\n          onChange: titleChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Amount\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          min: \"0.01\",\n          step: \"0.01\",\n          value: enterAmount,\n          onChange: amountChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Date\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"date\",\n          min: \"2019-01-01\",\n          max: \"2022-12-31\",\n          value: enterDate,\n          onChange: DateChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__actions\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Add Expense\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 9\n  }, this);\n}; // onChange 이벤트는 사용자의 입력이 어떤 식으로든 변경될 때 발생합니다\n//input 태그안의 value는 초깃값을 의미하는데 이를 enter시리즈에 바인딩을 하면\n//이벤트가 일어날 때 입력한 값이 먼저 set시리지에 저장이 되고 제출된 그 값이 onSubmit 함수를 통해 expenseDate에 저장이 된다.\n//하지만 그 값이 화면상에 그대로 노출되어있는데 이 값을 초기화해주기 위해 value에 default값을 넣어주어서 마무리했다.\n\n\n_s(ExpenseForm, \"s7pcGF2+nkt3YsQZIf9dbxWNDtw=\");\n\n_c = ExpenseForm;\nexport default ExpenseForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"ExpenseForm\");","map":{"version":3,"sources":["C:/Users/cosmo/OneDrive/바탕 화면/react-guide/src/components/NewExpense/ExpenseForm.js"],"names":["React","useState","scryRenderedComponentsWithType","ExpenseForm","props","enterTitle","setEnteredTitle","enterAmount","setEnteredAmount","enterDate","setEnteredDate","titleChangeHandler","event","target","value","amountChangeHandler","DateChangeHandler","submitHandler","preventDefault","expenseData","title","amount","date","Date","onSaveExpenseData"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport { scryRenderedComponentsWithType } from 'react-dom/test-utils';\r\n\r\nimport './ExpenseForm.css';\r\n\r\n\r\nconst ExpenseForm = (props) => {\r\n    const [enterTitle, setEnteredTitle] = useState('');\r\n    const [enterAmount, setEnteredAmount]= useState('');\r\n    const [enterDate, setEnteredDate]= useState('');\r\n    // const [userInput, setUserInput] = useState({\r\n    //     enterTitle: '',\r\n    //     enterAmount: '',\r\n    //     enterDate: ''\r\n    // });\r\n\r\n\r\n    const titleChangeHandler = (event) => {\r\n        setEnteredTitle(event.target.value);\r\n       // setUserInput({\r\n        //    ...userInput,\r\n        //    enterTitle: event.target.value\r\n        //});\r\n\r\n        //나중에 이전 state가 현재 state에 영향을 주는 것이라면 밑에 방식으로 하라\r\n        // setUserInput((prevState) => {\r\n        //     return ({\r\n        //         ...prevState, enteredTitle: event.target.value\r\n        //     });\r\n        // });\r\n    };\r\n    const amountChangeHandler = (event) => {\r\n        setEnteredAmount(event.target.value);\r\n    //     setUserInput({\r\n    //         ...userInput,\r\n    //         enterAmount: event.target.value\r\n    //     });\r\n    };\r\n    const DateChangeHandler = (event) => {\r\n        setEnteredDate(event.target.value);\r\n        // setUserInput({\r\n        //     ...userInput,\r\n        //     enterDate: event.target.value\r\n        // });\r\n    };\r\n\r\n    const submitHandler = (event) => {\r\n        event.preventDefault();\r\n\r\n        const expenseData = {\r\n            title: enterTitle,\r\n            amount: enterAmount,\r\n            date: new Date(enterDate)\r\n        };\r\n\r\n        props.onSaveExpenseData();\r\n        setEnteredTitle('');\r\n        setEnteredAmount('');\r\n        setEnteredDate('');\r\n    };\r\n//onSubmit이 왜 필요한가?\r\n//input태그에서 발생하는 submit이벤트를 처리할 수 있다...\r\n//preventDefault is built into javascript\r\n    return (\r\n        <form onSubmit={submitHandler}>\r\n            <div className='new-expense__controls'>\r\n                <div className='new-expense__control'>\r\n                    <label>Title</label>\r\n                    <input type='text' value={enterTitle} onChange={titleChangeHandler} />\r\n                </div>\r\n                <div className='new-expense__control'>\r\n                    <label>Amount</label>\r\n                    <input type='number' min=\"0.01\" step=\"0.01\" value={enterAmount} onChange={amountChangeHandler} />\r\n                </div>\r\n                <div className='new-expense__control'>\r\n                    <label>Date</label>\r\n                    <input type='date' min=\"2019-01-01\" max=\"2022-12-31\" value={enterDate} onChange={DateChangeHandler} />\r\n                </div>\r\n                <div className=\"new-expense__actions\">\r\n                    <button type=\"submit\" >Add Expense</button>\r\n                </div>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n// onChange 이벤트는 사용자의 입력이 어떤 식으로든 변경될 때 발생합니다\r\n//input 태그안의 value는 초깃값을 의미하는데 이를 enter시리즈에 바인딩을 하면\r\n//이벤트가 일어날 때 입력한 값이 먼저 set시리지에 저장이 되고 제출된 그 값이 onSubmit 함수를 통해 expenseDate에 저장이 된다.\r\n//하지만 그 값이 화면상에 그대로 노출되어있는데 이 값을 초기화해주기 위해 value에 default값을 넣어주어서 마무리했다.\r\nexport default ExpenseForm;"]},"metadata":{},"sourceType":"module"}