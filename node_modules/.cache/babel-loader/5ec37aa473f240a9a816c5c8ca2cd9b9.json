{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\cosmo\\\\OneDrive\\\\\\uBC14\\uD0D5 \\uD654\\uBA74\\\\react-guide\\\\src\\\\components\\\\Expenses\\\\Expense.js\",\n    _s = $RefreshSig$();\n\nimport './Expense.css';\nimport ExpenseItem from './ExpenseItem.js';\nimport Card from '../UI/Card.js';\nimport ExpenseFilter from '../ExpenseFilter/ExpensesFilter.js';\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Expense = props => {\n  _s();\n\n  const [filteredYear, setFilteredYear] = useState('2020');\n\n  const filterChangeHandler = selectedYear => {\n    setFilteredYear(selectedYear);\n  };\n\n  const filterExpenses = props.items.filter(expense => {\n    return expense.date.getFullYear().toString() === filteredYear;\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      className: \"expenses\",\n      children: [/*#__PURE__*/_jsxDEV(ExpenseFilter, {\n        selected: filteredYear,\n        onChangeFilter: filterChangeHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 17\n      }, this), filterExpenses.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No Expenses found.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 49\n      }, this) : filterExpenses.map(expense => /*#__PURE__*/_jsxDEV(ExpenseItem, {\n        title: expense.title,\n        amount: expense.amount,\n        date: expense.date\n      }, expense.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 21\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 9\n  }, this) //부모components에 값을 전달하기 위해서 props를 쓴다.\n  ;\n};\n\n_s(Expense, \"d6AxVjxjRbYO2YFEia8LjUybrDc=\");\n\n_c = Expense;\nexport default Expense; //map이 있기 때문에 UI에서 발생한 데이터가 로직을 거쳐 만들어 질 수 있다. 이전의 하드코딩이었으면 \n//배열 안의 인덱스로 밖에 안나오는 것이다.\n//일반적인 경우의 데이터 이동 경로이다. App(부모)에서 Expense(자식)으로 이동.\n//key에 id가 들어가기 때문에 식별이 되므로 원래 expenseitem에 전부 다시 전개가 안되고 추가한 하나의 아이템만 추가가 된다.\n\nvar _c;\n\n$RefreshReg$(_c, \"Expense\");","map":{"version":3,"sources":["C:/Users/cosmo/OneDrive/바탕 화면/react-guide/src/components/Expenses/Expense.js"],"names":["ExpenseItem","Card","ExpenseFilter","React","useState","Expense","props","filteredYear","setFilteredYear","filterChangeHandler","selectedYear","filterExpenses","items","filter","expense","date","getFullYear","toString","length","map","title","amount","id"],"mappings":";;;AAAA,OAAO,eAAP;AACA,OAAOA,WAAP,MAAwB,kBAAxB;AACA,OAAOC,IAAP,MAAiB,eAAjB;AACA,OAAOC,aAAP,MAA0B,oCAA1B;AACA,OAAOC,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;;AAEA,MAAMC,OAAO,GAAIC,KAAD,IAAW;AAAA;;AACvB,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCJ,QAAQ,CAAC,MAAD,CAAhD;;AAGA,QAAMK,mBAAmB,GAAGC,YAAY,IAAI;AACxCF,IAAAA,eAAe,CAACE,YAAD,CAAf;AACH,GAFD;;AAIA,QAAMC,cAAc,GAAGL,KAAK,CAACM,KAAN,CAAYC,MAAZ,CAAmBC,OAAO,IAAI;AACjD,WAAOA,OAAO,CAACC,IAAR,CAAaC,WAAb,GAA2BC,QAA3B,OAA0CV,YAAjD;AACH,GAFsB,CAAvB;AAKA,sBACI;AAAA,2BAEI,QAAC,IAAD;AAAM,MAAA,SAAS,EAAC,UAAhB;AAAA,8BACI,QAAC,aAAD;AAAe,QAAA,QAAQ,EAAEA,YAAzB;AACA,QAAA,cAAc,EAAEE;AADhB;AAAA;AAAA;AAAA;AAAA,cADJ,EAIKE,cAAc,CAACO,MAAf,KAA0B,CAA1B,gBAA+B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAA/B,GAA6DP,cAAc,CAACQ,GAAf,CAAoBL,OAAO,iBACrF,QAAC,WAAD;AAEA,QAAA,KAAK,EAAEA,OAAO,CAACM,KAFf;AAGA,QAAA,MAAM,EAAEN,OAAO,CAACO,MAHhB;AAIA,QAAA,IAAI,EAAEP,OAAO,CAACC;AAJd,SACKD,OAAO,CAACQ,EADb;AAAA;AAAA;AAAA;AAAA,cAD0D,CAJlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA,UADJ,CAuCI;AAvCJ;AAyCH,CAtDD;;GAAMjB,O;;KAAAA,O;AAwDN,eAAeA,OAAf,C,CAGA;AACA;AACA;AAEA","sourcesContent":["import './Expense.css';\r\nimport ExpenseItem from './ExpenseItem.js';\r\nimport Card from '../UI/Card.js';\r\nimport ExpenseFilter from '../ExpenseFilter/ExpensesFilter.js';\r\nimport React, { useState } from 'react';\r\n\r\nconst Expense = (props) => {\r\n    const [filteredYear, setFilteredYear] = useState('2020');\r\n    \r\n\r\n    const filterChangeHandler = selectedYear => {\r\n        setFilteredYear(selectedYear);\r\n    };\r\n\r\n    const filterExpenses = props.items.filter(expense => {\r\n        return expense.date.getFullYear().toString() === filteredYear;\r\n    });\r\n\r\n\r\n    return (\r\n        <div>\r\n\r\n            <Card className=\"expenses\">\r\n                <ExpenseFilter selected={filteredYear} \r\n                onChangeFilter={filterChangeHandler} />\r\n\r\n                {filterExpenses.length === 0 ? (<p>No Expenses found.</p>) : (filterExpenses.map((expense => \r\n                    <ExpenseItem \r\n                    key={expense.id}\r\n                    title={expense.title} \r\n                    amount={expense.amount} \r\n                    date={expense.date} />)))}\r\n                \r\n\r\n\r\n                \r\n                {/* <ExpenseItem\r\n                    title={props.items[0].title}\r\n                    amount={props.items[0].amount}\r\n                    date={props.items[0].date}\r\n                />\r\n                <ExpenseItem\r\n                    title={props.items[1].title}\r\n                    amount={props.items[1].amount}\r\n                    date={props.items[1].date}\r\n                />\r\n                <ExpenseItem\r\n                    title={props.items[2].title}\r\n                    amount={props.items[2].amount}\r\n                    date={props.items[2].date}\r\n                />\r\n                <ExpenseItem\r\n                    title={props.items[3].title}\r\n                    amount={props.items[3].amount}\r\n                    date={props.items[3].date}\r\n                />  */}\r\n            </Card>\r\n        </div>\r\n        //부모components에 값을 전달하기 위해서 props를 쓴다.\r\n    );\r\n}\r\n\r\nexport default Expense;\r\n\r\n\r\n//map이 있기 때문에 UI에서 발생한 데이터가 로직을 거쳐 만들어 질 수 있다. 이전의 하드코딩이었으면 \r\n//배열 안의 인덱스로 밖에 안나오는 것이다.\r\n//일반적인 경우의 데이터 이동 경로이다. App(부모)에서 Expense(자식)으로 이동.\r\n\r\n//key에 id가 들어가기 때문에 식별이 되므로 원래 expenseitem에 전부 다시 전개가 안되고 추가한 하나의 아이템만 추가가 된다."]},"metadata":{},"sourceType":"module"}